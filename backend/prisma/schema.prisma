generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String       @id @default(uuid())
  name        String
  logoUrl     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  preferences Json?
  location    String?
  size        String?
  invitations Invitation[]
  users       User[]
  Property    Property[]
  Report      Report[]
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  passwordHash  String
  role          Role
  isActive      Boolean    @default(true)
  mfaEnabled    Boolean    @default(false)
  mfaSecret     String?
  emailVerified Boolean    @default(false)
  acceptedTerms Boolean    @default(false)
  status        UserStatus @default(ACCEPTED)
  companyId     String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  firstName     String?
  lastName      String?
  company       Company    @relation(fields: [companyId], references: [id])

  PropertyBookmark PropertyBookmark[]

  Report Report[]

  EmailVerificationToken EmailVerificationToken[]

  PasswordResetToken PasswordResetToken[]
}

model Invitation {
  id         String       @id @default(uuid())
  email      String
  companyId  String
  status     InviteStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  acceptedAt DateTime?
  company    Company      @relation(fields: [companyId], references: [id])
}

model Property {
  id               String   @id @default(uuid())
  formattedAddress String
  addressLine1     String
  city             String
  state            String
  zipCode          String
  county           String?
  latitude         Float
  longitude        Float
  propertyType     String
  bedrooms         Int?
  bathrooms        Int?
  squareFootage    Int
  lotSize          Int?
  yearBuilt        Int?
  image            String?
  taxValue         Float?
  landValue        Float?
  improvementValue Float?
  ownerName        String?
  ownerType        String?
  companyId        String
  company          Company  @relation(fields: [companyId], references: [id])
  createdAt        DateTime @default(now())
}

model PropertyBookmark {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Report {
  id                String       @id @default(cuid())
  fullName          String
  estimatedNetWorth Int
  primaryLocation   String
  contactEmail      String
  primaryIndustry   String
  sourceOfWealth    String
  propertyTypes     String[]
  description       String
  propertyDetails   String
  confidenceScore   Int
  lastContactDate   DateTime?
  status            ReportStatus @default(NEW)
  createdById       String
  companyId         String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  createdBy User    @relation(fields: [createdById], references: [id])
  company   Company @relation(fields: [companyId], references: [id])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

enum ReportStatus {
  NEW
  REVIEWED
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum UserStatus {
  ACCEPTED
  REVOKED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REVOKED
}
